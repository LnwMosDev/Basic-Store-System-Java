/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.company2566;

import java.awt.Event;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Lenovo
 */
public class customerorder extends javax.swing.JFrame {

    Connection conn = null;
    Statement statement = null;
    Statement statement1 = null;
    Statement statement2 = null;
    Statement statement3 = null;
    DefaultTableModel tableModel = new DefaultTableModel();

    public customerorder() {
        initComponents();
        ConnectDatabase();
        selectcombobox();
        showTableDB();
        showCurentDate();
        showOrderNo() ;

        JTableHeader tableHeader = jTable1.getTableHeader();
        tableHeader.setFont(new Font("Angsana new", Font.PLAIN, 20));

        Object[] header = {"itemCode", "itemName", "Price", "Qty", "Amount"};
        tableModel.setColumnIdentifiers(header);
        jTable1.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sOrderNo = new javax.swing.JTextField();
        sOrderDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        sTotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        bInsert1 = new javax.swing.JButton();
        bNew = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        sEmployee = new javax.swing.JTextField();
        sCustomer = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pCode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pPrice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        pStock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        pSale = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        pAmount = new javax.swing.JTextField();
        pNew = new javax.swing.JButton();
        pUpdate = new javax.swing.JButton();
        pAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sOrderNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sOrderNoKeyPressed(evt);
            }
        });

        sOrderDate.setEditable(false);
        sOrderDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel1.setText("orderNo");

        jLabel2.setText("orderDate");

        jComboBox1.setFont(new java.awt.Font("PK Sukhothai", 0, 14)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("total");

        bInsert1.setText("insert");
        bInsert1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsert1bInsertActionPerformed(evt);
            }
        });

        bNew.setText("New");
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });

        bUpdate.setText("update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        bDelete.setForeground(new java.awt.Color(204, 0, 0));
        bDelete.setText("delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        bClose.setText("close");
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "itemCode", "itemName", "Price", "Qty", "Amount"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBox2.setFont(new java.awt.Font("PK Sukhothai", 0, 14)); // NOI18N
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Product");

        sEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sEmployeeKeyPressed(evt);
            }
        });

        sCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sCustomerKeyPressed(evt);
            }
        });

        jLabel12.setText("customer");

        jLabel13.setText("employee");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        pCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pCodeKeyPressed(evt);
            }
        });

        jLabel5.setText("code");

        jLabel8.setText("price");

        pPrice.setEditable(false);
        pPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pPriceKeyPressed(evt);
            }
        });

        jLabel9.setText("stock");

        jComboBox3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        pStock.setEditable(false);
        pStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pStockKeyPressed(evt);
            }
        });

        jLabel10.setText("sale");

        pSale.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pSaleKeyPressed(evt);
            }
        });

        jLabel11.setText("amount");

        pAmount.setEditable(false);
        pAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pAmountActionPerformed(evt);
            }
        });

        pNew.setForeground(new java.awt.Color(255, 102, 51));
        pNew.setText("New");
        pNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNewActionPerformed(evt);
            }
        });

        pUpdate.setText("Update");
        pUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pUpdateActionPerformed(evt);
            }
        });

        pAdd.setForeground(new java.awt.Color(0, 204, 51));
        pAdd.setText("Add");
        pAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(pCode, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(pNew)
                                .addGap(35, 35, 35)
                                .addComponent(pUpdate))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pStock, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel10)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pSale, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(pAdd)))))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(pPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(pAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pNew)
                    .addComponent(pUpdate)
                    .addComponent(pAdd))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInsert1)
                .addGap(18, 18, 18)
                .addComponent(bUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bDelete)
                .addGap(18, 18, 18)
                .addComponent(bClose)
                .addGap(163, 163, 163))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(sTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addGap(26, 26, 26)
                                            .addComponent(sEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(sOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(34, 34, 34)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(sOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(46, 46, 46)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(55, 55, 55)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(sOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(sTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bClose)
                    .addComponent(bInsert1)
                    .addComponent(bDelete)
                    .addComponent(bUpdate)
                    .addComponent(bNew))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void ConnectDatabase() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/cit3535", "root", "");
                statement = conn.createStatement();
                statement1 = conn.createStatement();
                statement2 = conn.createStatement();
                statement3 = conn.createStatement();
                System.out.println("success");
            } catch (SQLException ex) {
                System.out.println("un success1 ");
            }
        } catch (ClassNotFoundException Ex) {
            System.out.println("un success2");
        }

    }

    private void showCurentDate() {
        LocalDate now = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String formattedDate = now.format(formatter);
        sOrderDate.setText(formattedDate);
        
       
    }
    
    
    
       private void showOrderNo() {
           
           String sql = "select MAX(orderNo)+1 as no from customerorder";
            try {
                ResultSet rs = statement.executeQuery(sql);
                while (rs.next()) {
//                    String orderNo = rs.getString("no");
                    sOrderNo.setText(rs.getString("no"));
                    
                }
                rs.close();
            } catch (SQLException ex) {
        }
    }
       

    private void sOrderNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sOrderNoKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            String sql = "select * from customerorder join customer using(customerCode) join employee using(employeeCode) WHERE orderNo='" + sOrderNo.getText() + "'";
            try {
                ResultSet rs = statement.executeQuery(sql);
                while (rs.next()) {

                    sOrderDate.setText(rs.getString("orderDate"));
                    sCustomer.setText(rs.getString("customerCode"));
                    sEmployee.setText(rs.getString("employeeCode"));

                    String cusCode = rs.getString("customerName");
                    for (int i = 0; i < jComboBox1.getItemCount(); i++) {
                        String item = jComboBox1.getItemAt(i).toString();
                        if (item.startsWith(cusCode)) {
                            jComboBox1.setSelectedItem(item);
                            break;
                        }
                    }

                    String empCode = rs.getString("employeeName");
                    for (int i = 0; i < jComboBox2.getItemCount(); i++) {
                        String item = jComboBox2.getItemAt(i).toString();
                        if (item.startsWith(empCode)) {
                            jComboBox2.setSelectedItem(item);
                            break;
                        }
                    }

//                    sTotal.setText(rs.getString("total"));
                }
                rs.close();
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_sOrderNoKeyPressed

    private void bInsert1bInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsert1bInsertActionPerformed

        String insert = "INSERT INTO customerorder VALUES (" + sOrderNo.getText() + ",'" + sOrderDate.getText() + "'," + sCustomer.getText() + "," + sEmployee.getText() + "," + sTotal.getText() + ");";
        try {
            statement.executeUpdate(insert);
            showTableDB();
            System.out.println("INSERT success");
        } catch (Exception Ex) {
            System.out.print("INSERT Error" + insert + "\n" + Ex.getMessage());
        }
    }//GEN-LAST:event_bInsert1bInsertActionPerformed

    private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        sOrderNo.setText(null);
        sOrderDate.setText("");
        sTotal.setText("");
        jComboBox1.setSelectedIndex(0);
        sOrderNo.requestFocus();
        sCustomer.setText(null);
        sEmployee.setText(null);
        showCurentDate();
    }//GEN-LAST:event_bNewActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
        String update = "UPDATE customerorder SET orderNo='" + sOrderDate.getText() + "', total=" + sTotal.getText() + ", customerCode=" + sCustomer.getText() + ", employeeCode=" + sEmployee.getText() + " WHERE itemCode=" + sOrderNo.getText() + "";
        try {
            statement.executeUpdate(update);
            showTableDB();
            System.out.println("Update success");
        } catch (Exception ex) {
            System.out.print("Update Error" + ex.getMessage());
        }
    }//GEN-LAST:event_bUpdateActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        String delete = "DELETE FROM customerorder WHERE orderNo=(" + sOrderNo.getText() + ")";
        try {
            statement.executeUpdate(delete);
            showTableDB();
            System.out.println("Delete success");
        } catch (Exception Ex) {
            System.out.print("Delete Error" + delete);
        }
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        int pressed = JOptionPane.showConfirmDialog(null, "Exit", "ออก ?", JOptionPane.YES_NO_OPTION);
        if (pressed == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_bCloseActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
//        String selectedEmployee = (String) jComboBox2.getSelectedItem();
//        if (selectedEmployee != null) {
//            try {
//                String sql = "SELECT * FROM employee JOIN customerorder USING(employeeCode) WHERE employeeName='" + selectedEmployee + "'";
//                ResultSet rs = statement2.executeQuery(sql);
//                while (rs.next()) {
//                    String empCode = rs.getString("employeeCode");
//                    sEmployee.setText(empCode);
//                }
//                rs.close();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//        }
        String empcode = (String) jComboBox2.getSelectedItem();
        String selectQuery = "SELECT * FROM employee WHERE  employeeName= '" + empcode + "'";
        try {
            ResultSet resultSet = statement2.executeQuery(selectQuery);
            if (resultSet.next()) {
                sEmployee.setText(resultSet.getString(1));
            }
            resultSet.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        String selectedItem = (String) jComboBox3.getSelectedItem();
        if (selectedItem != null) {
            try {
                String sql = "SELECT * FROM item  WHERE itemName='" + selectedItem + "'";
                ResultSet rs = statement2.executeQuery(sql);
                while (rs.next()) {
                    String itemCode = rs.getString("itemCode");
                    pCode.setText(itemCode);
                    String price = rs.getString("price");
                    pPrice.setText(price);
                    String qty = rs.getString("qty");
                    pStock.setText(qty);

                    if (!pSale.getText().isEmpty()) {
                        int priceValue = Integer.parseInt(pPrice.getText());
                        int SaleValue = Integer.parseInt(pSale.getText());
                        int amountValue = priceValue * SaleValue;
                        pAmount.setText(String.valueOf(amountValue));
                    }
                }
                rs.close();

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void pAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pAddActionPerformed
        Object[] data = {pCode.getText(), jComboBox3.getSelectedItem().toString(), pPrice.getText(), pStock.getText(), pAmount.getText()};
        tableModel.addRow(data);
        calculateTotal();
    }//GEN-LAST:event_pAddActionPerformed

    private void calculateTotal() {
        int totalSum = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            try {
                int totalValue = Integer.parseInt(jTable1.getValueAt(i, 4).toString().replaceAll(",", ""));
                totalSum += totalValue;
            } catch (Exception ex) {
            }
        }
        sTotal.setText(NumberFormat.getInstance(Locale.US).format(totalSum));
    }

    private void pPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pPriceKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            pStock.requestFocus();
        }
    }//GEN-LAST:event_pPriceKeyPressed

    private void pStockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pStockKeyPressed

        if (evt.getKeyCode() == Event.ENTER) {
            pSale.requestFocus();
        }
    }//GEN-LAST:event_pStockKeyPressed

    private void pNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNewActionPerformed
        pCode.setText("");
        pPrice.setText("");
        pStock.setText("");
        pAmount.setText("");
        pSale.setText("");

    }//GEN-LAST:event_pNewActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
//        String selectedCustomer = (String) jComboBox1.getSelectedItem();
//        if (selectedCustomer != null) {
//            try {
//                String sql = "SELECT * FROM customer JOIN customerorder USING(customerCode) WHERE customerName='" + selectedCustomer + "'";
//                ResultSet rs = statement1.executeQuery(sql);
//                while (rs.next()) {
//                    String cusCode = rs.getString("customerCode");
//                    sCustomer.setText(cusCode);
//                }
//                rs.close();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//        }

        String cuscode = (String) jComboBox1.getSelectedItem();
        String selectQuery = "SELECT * FROM customer WHERE  customerName= '" + cuscode + "'";
        try {
            ResultSet resultSet = statement2.executeQuery(selectQuery);
            if (resultSet.next()) {
                sCustomer.setText(resultSet.getString(1));
            }
            resultSet.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void sCustomerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sCustomerKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            String sql = "select * from customer WHERE customerCode='" + sCustomer.getText() + "'";
            try {
                ResultSet rs = statement.executeQuery(sql);
                while (rs.next()) {
                    String cusCode = rs.getString("customerName");
                    for (int i = 0; i < jComboBox1.getItemCount(); i++) {
                        String item = jComboBox1.getItemAt(i).toString();
                        if (item.startsWith(cusCode)) {
                            jComboBox1.setSelectedItem(item);
                            break;
                        }
                    }
                }
                rs.close();
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_sCustomerKeyPressed

    private void sEmployeeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sEmployeeKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            String sql = "select * from employee WHERE employeeCode='" + sEmployee.getText() + "'";
            try {
                ResultSet rs = statement.executeQuery(sql);
                while (rs.next()) {
                    String empCode = rs.getString("employeeName");
                    for (int i = 0; i < jComboBox2.getItemCount(); i++) {
                        String item = jComboBox2.getItemAt(i).toString();
                        if (item.startsWith(empCode)) {
                            jComboBox2.setSelectedItem(item);
                            break;
                        }
                    }
                }
                rs.close();
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_sEmployeeKeyPressed

    private void pCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pCodeKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            String sql = "select * from item WHERE itemCode='" + pCode.getText() + "'";
            try {
                ResultSet rs = statement.executeQuery(sql);
                while (rs.next()) {
                    String itemCode = rs.getString("itemName");
                    for (int i = 0; i < jComboBox3.getItemCount(); i++) {
                        String item = jComboBox3.getItemAt(i).toString();
                        if (item.startsWith(itemCode)) {
                            jComboBox3.setSelectedItem(item);
                            break;
                        }
                    }
                }
                rs.close();
            } catch (SQLException ex) {
            }
        }
    }//GEN-LAST:event_pCodeKeyPressed

    private void pAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pAmountActionPerformed

    private void pSaleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pSaleKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            pAmount.requestFocus();
            try {
                int priceValue = Integer.parseInt(pPrice.getText());
                int SaleValue = Integer.parseInt(pSale.getText());
                int amountValue = priceValue * SaleValue;
                pAmount.setText(String.valueOf(amountValue));

            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_pSaleKeyPressed

    private void pUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pUpdateActionPerformed

    }//GEN-LAST:event_pUpdateActionPerformed

    private void selectcombobox() {
        try {
            ResultSet r = statement.executeQuery("select * from customerorder join customer using(customerCode) group by customerCode");
            while (r.next()) {
//                jComboBox1.addItem(r.getString("customerCode") + " - " + r.getString("customerName"));
                jComboBox1.addItem(r.getString("customerName"));
            }
            r.close();

            ResultSet rs = statement1.executeQuery("select * from customerorder join employee using(employeeCode) group by employeeCode");
            while (rs.next()) {
//                jComboBox2.addItem(rs.getString("employeeCode") + " - " + rs.getString("employeeName"));
                jComboBox2.addItem(rs.getString("employeeName"));
            }
            rs.close();

            ResultSet s = statement3.executeQuery("select * from item");
            while (s.next()) {
//                jComboBox3.addItem(s.getString("itemCode") + " - " + s.getString("itemName"));
                jComboBox3.addItem(s.getString("itemName"));
            }
            s.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to Connect to Database", "Error Connection",
                    JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }
        sCustomer.setText(null);
        sEmployee.setText(null);
        pCode.setText(null);
       jComboBox1.setSelectedIndex(-1);
       jComboBox2.setSelectedIndex(-1);
       jComboBox3.setSelectedIndex(-1);
    }

    private void showTableDB() {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(customerorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(customerorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(customerorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(customerorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new customerorder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClose;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bInsert1;
    private javax.swing.JButton bNew;
    private javax.swing.JButton bUpdate;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton pAdd;
    private javax.swing.JTextField pAmount;
    private javax.swing.JTextField pCode;
    private javax.swing.JButton pNew;
    private javax.swing.JTextField pPrice;
    private javax.swing.JTextField pSale;
    private javax.swing.JTextField pStock;
    private javax.swing.JButton pUpdate;
    private javax.swing.JTextField sCustomer;
    private javax.swing.JTextField sEmployee;
    private javax.swing.JTextField sOrderDate;
    private javax.swing.JTextField sOrderNo;
    private javax.swing.JTextField sTotal;
    // End of variables declaration//GEN-END:variables
}
